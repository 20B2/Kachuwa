@using Kachuwa.Web
@{
    ViewData["Title"] = "Home Page";
}
<h1>Home</h1>
<p>@DateTime.Now.ToString()</p>
@await Component.InvokeAsync("ContactUsView")
<component name="ContactUsView"></component>

<h1>This should be mapped to "/notifications"</h1>
<input type=text id="textInput" placeholder="Enter your text" />
<button id="sendButton">Send</button>
<ul id="messages"></ul>
<script src="~/resources/websocket/WebSocketManager.js"></script>
<script language="javascript" type="text/javascript">

    var connection = new WebSocketManager.Connection("ws://localhost:" + location.port + "@SocketHubs.NotificationHub");

    connection.clientMethods["receiveMessage"] = (message) => {
        var messageText = "Someone said: " + message;

        console.log(messageText);
        appendItem(list, messageText);
    };

    connection.start();

    var list = document.getElementById("messages");
    var button = document.getElementById("sendButton");


    button.addEventListener("click", function () {

        var input = document.getElementById("textInput");
        sendMessage(input.value);

        input.value = "";
    });

    function sendMessage(message) {
        console.log("Sending through HTTP to a controller:" + message);

        $.ajax({
            url: "http://" + window.location.host + "/Notification/notify?message=" + message,
            method: 'GET'
        });
    }

    function appendItem(list, message) {
        var item = document.createElement("li");
        item.appendChild(document.createTextNode(message));
        list.appendChild(item);
    }


</script>
@if (User.Identity.IsAuthenticated)
{
    <h1>Welcome back @User.Identity.Name</h1>
    <h2>User Claims</h2>
    <dl>
        @foreach (var claim in User.Claims)
        {
        <dt>@claim.Type</dt>
        <dd>@claim.Value</dd>
        }
    </dl>

    var authScheme = "Identity.Application";
    if (!String.IsNullOrWhiteSpace(authScheme))
    {
        <h2>Cookies Properties</h2>
        <dl>
            @{
                var props = (await Context.Authentication.GetAuthenticateInfoAsync(authScheme)).Properties;
            }
            @foreach (var item in props.Items)
            {
                <dt>@item.Key</dt>
                <dd>@item.Value</dd>
            }
        </dl>
                    }
                }
