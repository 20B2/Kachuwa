@using Kachuwa.Web
@{
    ViewData["Title"] = "Home Page";
}
<h1>Home</h1>
<p>@DateTime.Now.ToString()</p>

@*@await Component.InvokeAsync("ContactUsView")*@
<component name="ContactUsView"></component>

<h1>This should be mapped to "/notifications"</h1>
<input type=text id="textInput" placeholder="Enter your text" />
<button id="sendButton">Send</button>
<ul id="messages"></ul>

<markdown>
    # Octa Grid

    The Octa Grid is specially designed to reduce heavy work load on creating crud application. This is written in typescript  and will give you fully automated crud functionality with any server side language. By default it uses bootstrap forms but you can also create own forms(eg,materialcss) and inputs.

    see the [Demo](https://silentturtle.github.io/octagriddemo.github.io/) here.
    #Note
    (Still in Development though you can hit try :))

    # Included Feature

    - Grid
    - Form Builder
    - Form Elements
    - Toster


    You can also:
    - Create own form bulder
    - Create customized toaster
    - add new grid components


    ### Documentation



    ### Installation

    Just RUN npmrestore.bat or type command manually
    ```sh
    $ npm install
    ```



    ### Contribution?

    Want to contribute? Yes,sure you can.




    ### Todos

    -bug fix
    -enhancement

    License
    ----

    MIT
</markdown>
<script src="~/resources/websocket/WebSocketManager.js"></script>
<script language="javascript" type="text/javascript">

    var connection = new WebSocketManager.Connection("ws://"+location.hostname+":" + location.port + "@SocketHubs.NotificationHub");

    connection.clientMethods["receiveMessage"] = (message) => {
        var messageText = "Someone said: " + message;

        console.log(messageText);
        appendItem(list, messageText);
    };

    connection.start();

    var list = document.getElementById("messages");
    var button = document.getElementById("sendButton");


    button.addEventListener("click", function () {

        var input = document.getElementById("textInput");
        sendMessage(input.value);

        input.value = "";
    });

    function sendMessage(message) {
        console.log("Sending through HTTP to a controller:" + message);

        $.ajax({
            url: "http://" + window.location.host + "/Notification/notify?message=" + message,
            method: 'GET'
        });
    }

    function appendItem(list, message) {
        var item = document.createElement("li");
        item.appendChild(document.createTextNode(message));
        list.appendChild(item);
    }


</script>
@if (User.Identity.IsAuthenticated)
{
    <h1>Welcome back @User.Identity.Name</h1>
    <h2>User Claims</h2>
    <dl>
        @foreach (var claim in User.Claims)
        {
            <dt>@claim.Type</dt>
            <dd>@claim.Value</dd>
        }
    </dl>

    var authScheme = "Identity.Application";
    if (!String.IsNullOrWhiteSpace(authScheme))
    {
        <h2>Cookies Properties</h2>
        <dl>
            @{
                var props = (await Context.Authentication.GetAuthenticateInfoAsync(authScheme)).Properties;
            }
            @foreach (var item in props.Items)
            {
                <dt>@item.Key</dt>
                <dd>@item.Value</dd>
            }
        </dl>
                    }
                }
