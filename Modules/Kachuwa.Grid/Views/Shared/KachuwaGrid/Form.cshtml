@using Kachuwa.Data.Crud.FormBuilder
@using Kachuwa.Form;
@model Kachuwa.Form.IForm

<link href="~/module/kachuwagrid/resources/css/kgridstyle.css" rel="stylesheet" />
@functions
{

    private string[] parseColumnTemplate(string format)
    {
        var result = format.Split(new char[] { '{', '}' });
        if (result.Length == 3)
        {
            return result;
        }
        else
        {
            return new string[] { "", "","" };
        }
    }

  

}
<div id="@Model.Name" class="kachuwa-form">

<form name="@Model.Name" class="@Model.CssClasses" method="post" action="@Model.Action" enctype="@Model.EncType">



@foreach (Kachuwa.Form.IFormSection formSection in Model.Sections)
{

    <section name="@formSection.Name" class="@formSection.CssClasses">


    @if (!string.IsNullOrEmpty(formSection.Heading))
    {
        <h2>@formSection.Heading</h2>
    }
    @if (!string.IsNullOrEmpty(formSection.SubHeading))
    {
        <h4>@formSection.SubHeading</h4>
    }
    @if (!string.IsNullOrEmpty(formSection.HelpLine))
    {
        <p>@formSection.HelpLine</p>
    }

    @foreach (var row in formSection.Rows)
    {
        <div class="@row.CssClasses">
            
            @if (row.Template != null)
            {
                @(row.Template)
             
            }
        @{ int ColumnNo = row.Columns.Count();}
        @foreach (var column in row.Columns)
        {
            @(Html.Raw(parseColumnTemplate(column.ColumnFormat)[0]))

            @if(column.Template != null)
            {
                @(column.Template)

            }
            if (ColumnNo > 1)
            {
                <div class="@column.CssClasses">
                    @foreach (var control in column.Controls)
                    {
                        if (control.InputType != FormInputControl.Hidden)
                        {
                            <label for="@control.Id">@control.DisplayName</label>
                        }


                        switch (control.InputType)
                        {
                            case FormInputControl.Hidden:
                                <input type="hidden" value="@control.ValueFor(Model.FormModel)" name="@control.Name" @control.RenderAttributes(this.ViewContext) />
                                break;
                            case FormInputControl.CheckBox:
                                if (control.ValueFor(Model.FormModel).ToString().ToLower() == "false")
                                {
                                    <input type="checkbox" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                           name="@control.Name" value="false" />
                                }
                                else
                                {
                                    <input type="checkbox" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                           name="@control.Name" value="true" checked="checked" />
                                }
                                break;
                            case FormInputControl.CheckBoxList:
                                <div class="checkbox-wrapper"> 
                                    @control.RenderControlSource(control.DataSource)
                                </div>
                              
                                break;
                            case FormInputControl.Color:
                                <input type="color" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Date:
                                <div class='input-group'>
                                    <input type="date" class="date @control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                           name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.DateTime:
                                <div class='input-group'>
                                    <input type="datetime" class="datetimepicker @control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                           name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Editor:
                                <textarea class="editor @control.CssClasses" name="@control.Name" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))>@control.ValueFor(Model.FormModel)</textarea>
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Email:
                                <input type="email" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.File:
                                <input type="file" class="@control.CssClasses" id="@control.Id" name="@control.Name"  @Html.Raw(control.RenderAttributes(this.ViewContext)) />
                                break;
                            case FormInputControl.Image: 
                                <input type="file" class="@control.CssClasses" id="@control.Id" name="@control.Name"  @Html.Raw(control.RenderAttributes(this.ViewContext)) />
                                break;
                            case FormInputControl.Number:
                                <input type="number" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Password:
                                <input type="password" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Radio:

                                if (control.ValueFor(Model.FormModel).ToString().ToLower() == "false")
                                {
                                    <input type="radio" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                           name="@control.Name" />

                                }
                                else
                                { <input type="radio" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                         name="@control.Name" checked="checked" />
                                }
                                break;
                            case FormInputControl.RadioList:
                                break;
                            case FormInputControl.Select:
                                <select class="@control.CssClasses" name="@control.Name"  @Html.Raw(control.RenderAttributes(this.ViewContext))>
                                    (@control.RenderControlSource(control.DataSource))
                                </select>
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Telephone:
                                <input type="tel" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Url:
                                <input type="url" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.TextArea:
                                <textarea class="@control.CssClasses" name="@control.Name" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))>@control.ValueFor(Model.FormModel)</textarea>
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.TextBox:
                                <input name="@control.Name" type="text" class="@control.CssClasses" id="@control.Id"   @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       value="@control.ValueFor(Model.FormModel)"
                                       placeholder="@control.PlaceHolder" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                                break;
                            case FormInputControl.Tag:
                                <input name="@control.Name" type="text" class="kachuwa-tags @control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       value="@control.ValueFor(Model.FormModel)"
                                       placeholder="@control.PlaceHolder" />
                                    <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>

                                break;
                            case FormInputControl.Template:


                                break;
                            case FormInputControl.Switch:
                                if (control.ValueFor(Model.FormModel).ToString().ToLower() == "false")
                                {
                                    <label class="switch">
                                        <input type="checkbox" name="@control.Name" value="false"  @Html.Raw(control.RenderAttributes(this.ViewContext)) />
                                        <div class="switchslider round"></div>
                                    </label>
                                }
                                else
                                {
                                    <label class="switch">
                                        <input type="checkbox" name="@control.Name" value="true" checked="checked"   @Html.Raw(control.RenderAttributes(this.ViewContext))/>
                                        <div class="switchslider round"></div>
                                    </label>

                                }

                                break;

                        }

                        if (!string.IsNullOrEmpty(control.Help))
                        {
                            <small class="form-text text-muted control-help">@control.Help</small>
                        }


                    }
                </div>

            }
            else
            {
                foreach (var control in column.Controls)
                {
                    if (control.InputType != FormInputControl.Hidden)
                    {
                        <label for="@control.Id">@control.DisplayName</label>
                    }

                    switch (control.InputType)
                    {
                        case FormInputControl.Hidden:
                            <input type="hidden" value="@control.ValueFor(Model.FormModel)" name="@control.Name"  @Html.Raw(control.RenderAttributes(this.ViewContext)) />
                            break;
                        case FormInputControl.CheckBox:
                            if (control.ValueFor(Model.FormModel).ToString().ToLower() == "false")
                            {
                                <input type="checkbox" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="false" />
                            }
                            else
                            {
                                <input type="checkbox" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="true" checked="checked" />
                            }
                            break;
                        case FormInputControl.CheckBoxList:
                            <div class="checkbox-wrapper">
                                @control.RenderControlSource(control.DataSource)
                            </div>
                            break;
                        case FormInputControl.Color:
                            <input type="color" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Date:
                            <div class='input-group'>
                                <input type="date" class="date @control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.DateTime:
                            <div class='input-group '>
                                <input type="datetime" class="datetimepicker @control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>

                            break;
                        case FormInputControl.Editor:
                            <textarea class="editor @control.CssClasses" name="@control.Name" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))>@control.ValueFor(Model.FormModel)</textarea>
                            <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Email:
                            <input type="email" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.File:
                            <input type="file" class="@control.CssClasses" id="@control.Id" name="@control.Name"   @Html.Raw(control.RenderAttributes(this.ViewContext))/>
                            break;
                        case FormInputControl.Image:
                            <input type="file" class="@control.CssClasses" id="@control.Id" name="@control.Name"  @Html.Raw(control.RenderAttributes(this.ViewContext)) />
                            break;
                        case FormInputControl.Number:
                            <input type="number" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Password:
                            <input type="password" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Radio:

                            if (control.ValueFor(Model.FormModel).ToString().ToLower() == "false")
                            {
                                <input type="radio" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                       name="@control.Name" />

                            }
                            else
                            { <input type="radio" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                     name="@control.Name" checked="checked" />
                            }
                            break;
                        case FormInputControl.RadioList:
                            break;
                        case FormInputControl.Select:
                            <select class="@control.CssClasses" name="@control.Name"  @Html.Raw(control.RenderAttributes(this.ViewContext)) >
                                (@control.RenderControlSource(control.DataSource))
                            </select>
                            <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Telephone:
                            <input type="tel" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Url:
                            <input type="url" class="@control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   name="@control.Name" value="@control.ValueFor(Model.FormModel)" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.TextArea:
                            <textarea class="@control.CssClasses" name="@control.Name" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))>@control.ValueFor(Model.FormModel)</textarea>
                            <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.TextBox:
                            <input name="@control.Name" type="text" class="@control.CssClasses" id="@control.Id"   @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   value="@control.ValueFor(Model.FormModel)"
                                   placeholder="@control.PlaceHolder" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>
                            break;
                        case FormInputControl.Tag:
                            <input name="@control.Name" type="text" class="kachuwa-tags @control.CssClasses" id="@control.Id"  @Html.Raw(control.RenderAttributes(this.ViewContext))
                                   value="@control.ValueFor(Model.FormModel)"
                                   placeholder="@control.PlaceHolder" />
                                <span class="field-validation-valid" data-valmsg-for="@control.Name" data-valmsg-replace="true"></span>

                            break;
                        case FormInputControl.Template:


                            break;
                        case FormInputControl.Switch:
                            if (control.ValueFor(Model.FormModel).ToString().ToLower() == "false")
                            {
                                <label class="switch">
                                    <input type="checkbox" name="@control.Name" value="false"  @Html.Raw(control.RenderAttributes(this.ViewContext)) />
                                    <div class="switchslider round"></div>
                                </label>
                            }
                            else
                            {
                                <label class="switch">
                                    <input type="checkbox" name="@control.Name" value="true" checked="checked"   @Html.Raw(control.RenderAttributes(this.ViewContext))/>
                                    <div class="switchslider round"></div>
                                </label>

                            }

                            break;

                    }
                    if (!string.IsNullOrEmpty(control.Help))
                    {
                        <small class="form-text text-muted control-help">@control.Help</small>
                    }


                }
            }

            @(Html.Raw(parseColumnTemplate(column.ColumnFormat)[2]))
        }
        </div>
    }

    </section>
}
<div class="col-md-12">
    <a href="@Model.CancelUrl" class="btn btn-default formcancel pull-right"><i class="fa fa-close"></i> Cancel</a>
    <button type="submit" class="btn btn-primary formsave  pull-right"><i class="fa fa-save"></i> Save</button>
</div>
    <div class="col-md-12 clearfix">
        <div asp-validation-summary="All" class="text-danger"></div>
    </div>
</form>

    <form method="post" enctype="multipart/form-data">
        <input type="file" id="files" name="files" style="display: none;" />
    </form>

</div>
<script src="/module/kachuwagrid/resources/js/kachuwagrid.js"></script>
<script src="/resources/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
